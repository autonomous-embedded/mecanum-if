// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mecanum.proto

#ifndef PROTOBUF_INCLUDED_mecanum_2eproto
#define PROTOBUF_INCLUDED_mecanum_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mecanum_2eproto 

namespace protobuf_mecanum_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mecanum_2eproto
class ControlRequest;
class ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
namespace google {
namespace protobuf {
template<> ::ControlRequest* Arena::CreateMaybeMessage<::ControlRequest>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ControlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ControlRequest) */ {
 public:
  ControlRequest();
  virtual ~ControlRequest();

  ControlRequest(const ControlRequest& from);

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlRequest* other);
  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlRequest* New() const final {
    return CreateMaybeMessage<ControlRequest>(NULL);
  }

  ControlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlRequest& from);
  void MergeFrom(const ControlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 linear_velocity = 1;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 1;
  ::google::protobuf::int32 linear_velocity() const;
  void set_linear_velocity(::google::protobuf::int32 value);

  // required int32 velocity_offset_angle = 2;
  bool has_velocity_offset_angle() const;
  void clear_velocity_offset_angle();
  static const int kVelocityOffsetAngleFieldNumber = 2;
  ::google::protobuf::int32 velocity_offset_angle() const;
  void set_velocity_offset_angle(::google::protobuf::int32 value);

  // required int32 angular_velocity = 3;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 3;
  ::google::protobuf::int32 angular_velocity() const;
  void set_angular_velocity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ControlRequest)
 private:
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_velocity_offset_angle();
  void clear_has_velocity_offset_angle();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 linear_velocity_;
  ::google::protobuf::int32 velocity_offset_angle_;
  ::google::protobuf::int32 angular_velocity_;
  friend struct ::protobuf_mecanum_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlRequest

// required int32 linear_velocity = 1;
inline bool ControlRequest::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlRequest::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlRequest::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlRequest::clear_linear_velocity() {
  linear_velocity_ = 0;
  clear_has_linear_velocity();
}
inline ::google::protobuf::int32 ControlRequest::linear_velocity() const {
  // @@protoc_insertion_point(field_get:ControlRequest.linear_velocity)
  return linear_velocity_;
}
inline void ControlRequest::set_linear_velocity(::google::protobuf::int32 value) {
  set_has_linear_velocity();
  linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:ControlRequest.linear_velocity)
}

// required int32 velocity_offset_angle = 2;
inline bool ControlRequest::has_velocity_offset_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlRequest::set_has_velocity_offset_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlRequest::clear_has_velocity_offset_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlRequest::clear_velocity_offset_angle() {
  velocity_offset_angle_ = 0;
  clear_has_velocity_offset_angle();
}
inline ::google::protobuf::int32 ControlRequest::velocity_offset_angle() const {
  // @@protoc_insertion_point(field_get:ControlRequest.velocity_offset_angle)
  return velocity_offset_angle_;
}
inline void ControlRequest::set_velocity_offset_angle(::google::protobuf::int32 value) {
  set_has_velocity_offset_angle();
  velocity_offset_angle_ = value;
  // @@protoc_insertion_point(field_set:ControlRequest.velocity_offset_angle)
}

// required int32 angular_velocity = 3;
inline bool ControlRequest::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlRequest::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlRequest::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlRequest::clear_angular_velocity() {
  angular_velocity_ = 0;
  clear_has_angular_velocity();
}
inline ::google::protobuf::int32 ControlRequest::angular_velocity() const {
  // @@protoc_insertion_point(field_get:ControlRequest.angular_velocity)
  return angular_velocity_;
}
inline void ControlRequest::set_angular_velocity(::google::protobuf::int32 value) {
  set_has_angular_velocity();
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:ControlRequest.angular_velocity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mecanum_2eproto
